CCS PCM C Compiler, Version 5.115d, 1               29-ago.-23 17:31
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Users\victo\OneDrive\Documentos\X-TRAINER-hands-on\CCS\PIC16F\10-LCD-CCS-PIC16F887-877A\Proyecto\PIC16F887\LCD.lst

               ROM used:   476 words (6%)
                           Largest free fragment is 2048
               RAM used:   8 (2%) at main() level
                           20 (5%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   17D
0003:  NOP
.................... /************************************************************************************************
.................... Company:
.................... Microside Technology Inc.
.................... File Name:
.................... LCD.c
.................... Product Revision  :  1
.................... Device            :  X-TRAINER
.................... Driver Version    :  1.0
.................... ************************************************************************************************/
.................... 
.................... /*
.................... ---------------------------------------------------------------------------
.................... Esta práctica consiste en imprimir un mensaje, a través de una
.................... pantalla LCD
.................... ---------------------------------------------------------------------------
.................... */
.................... 
.................... #include <16F887.h>                         // Incluye el microcontrolador con el que se va a trabajar 
.................... //////////// Standard Header file for the PIC16F887 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F887
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA 20,10
000D:  DATA A0,26
000E:  DATA C9,21
000F:  DATA D2,27
0010:  DATA D3,24
0011:  DATA C4,22
0012:  DATA 00,00
0013:  DATA 20,10
0014:  DATA 20,2A
0015:  DATA C5,21
0016:  DATA 48,27
0017:  DATA 4F,26
0018:  DATA CF,23
0019:  DATA 59,00
001A:  DATA 20,10
001B:  DATA C2,24
001C:  DATA 45,27
001D:  DATA D6,22
001E:  DATA CE,24
001F:  DATA C4,27
0020:  DATA 53,00
*
0127:  MOVF   0B,W
0128:  MOVWF  22
0129:  BCF    0B.7
012A:  BSF    03.5
012B:  BSF    03.6
012C:  BSF    0C.7
012D:  BSF    0C.0
012E:  NOP
012F:  NOP
0130:  BCF    03.5
0131:  BCF    03.6
0132:  BTFSC  22.7
0133:  BSF    0B.7
0134:  BSF    03.6
0135:  MOVF   0C,W
0136:  ANDLW  7F
0137:  BTFSC  03.2
0138:  GOTO   17B
0139:  BCF    03.6
013A:  MOVWF  22
013B:  BSF    03.6
013C:  MOVF   0D,W
013D:  BCF    03.6
013E:  MOVWF  23
013F:  BSF    03.6
0140:  MOVF   0F,W
0141:  BCF    03.6
0142:  MOVWF  24
0143:  MOVF   22,W
0144:  MOVWF  25
0145:  CALL   103
0146:  MOVF   23,W
0147:  BSF    03.6
0148:  MOVWF  0D
0149:  BCF    03.6
014A:  MOVF   24,W
014B:  BSF    03.6
014C:  MOVWF  0F
014D:  BCF    03.6
014E:  MOVF   0B,W
014F:  MOVWF  25
0150:  BCF    0B.7
0151:  BSF    03.5
0152:  BSF    03.6
0153:  BSF    0C.7
0154:  BSF    0C.0
0155:  NOP
0156:  NOP
0157:  BCF    03.5
0158:  BCF    03.6
0159:  BTFSC  25.7
015A:  BSF    0B.7
015B:  BSF    03.6
015C:  RLF    0C,W
015D:  RLF    0E,W
015E:  ANDLW  7F
015F:  BTFSC  03.2
0160:  GOTO   17B
0161:  BCF    03.6
0162:  MOVWF  22
0163:  BSF    03.6
0164:  MOVF   0D,W
0165:  BCF    03.6
0166:  MOVWF  23
0167:  BSF    03.6
0168:  MOVF   0F,W
0169:  BCF    03.6
016A:  MOVWF  24
016B:  MOVF   22,W
016C:  MOVWF  25
016D:  CALL   103
016E:  MOVF   23,W
016F:  BSF    03.6
0170:  MOVWF  0D
0171:  BCF    03.6
0172:  MOVF   24,W
0173:  BSF    03.6
0174:  MOVWF  0F
0175:  INCF   0D,F
0176:  BTFSC  03.2
0177:  INCF   0F,F
0178:  BCF    03.6
0179:  GOTO   127
017A:  BSF    03.6
017B:  BCF    03.6
017C:  RETURN
.................... 
.................... #list
.................... 
.................... #use delay ( clock=20Mhz, crystal )         // Tipo de oscilador y frecuencia dependiendo del microcontrolador 
*
0021:  MOVLW  26
0022:  MOVWF  04
0023:  BCF    03.7
0024:  MOVF   00,W
0025:  BTFSC  03.2
0026:  GOTO   034
0027:  MOVLW  06
0028:  MOVWF  78
0029:  CLRF   77
002A:  DECFSZ 77,F
002B:  GOTO   02A
002C:  DECFSZ 78,F
002D:  GOTO   029
002E:  MOVLW  7B
002F:  MOVWF  77
0030:  DECFSZ 77,F
0031:  GOTO   030
0032:  DECFSZ 00,F
0033:  GOTO   027
0034:  RETURN
.................... 
.................... /*
.................... ------------------------------------------------------------------------------
.................... CONFIGURACION DE PINES LCD
.................... ------------------------------------------------------------------------------
.................... */
.................... 
.................... #define LCD_RS PIN_B0                       // CONTROL del LCD
.................... #define LCD_RW PIN_B1
.................... #define LCD_E PIN_B2
.................... #define LCD_DB4 PIN_B3                      // DATOS del LCD (4 lineas)
.................... #define LCD_DB5 PIN_B4
.................... #define LCD_DB6 PIN_B5
.................... #define LCD_DB7 PIN_B6
.................... 
.................... #include "flex_lcd.h"                       // LIBRERIA LCD
.................... 
.................... // flex_lcd.c
.................... 
.................... // These pins are for the Microchip PicDem2-Plus board,
.................... // which is what I used to test the driver.  Change these
.................... // pins to fit your own board.
.................... 
.................... //#define LCD_DB4   PIN_B4
.................... //#define LCD_DB5   PIN_B5
.................... //#define LCD_DB6   PIN_B6
.................... //#define LCD_DB7   PIN_B7
.................... //
.................... //#define LCD_RS    PIN_C0
.................... //#define LCD_RW    PIN_C1
.................... //#define LCD_E     PIN_C2
.................... 
.................... // If you only want a 6-pin interface to your LCD, then
.................... // connect the R/W pin on the LCD to ground, and comment
.................... // out the following line.
.................... 
.................... #define USE_LCD_RW   1
.................... 
.................... //========================================
.................... 
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line
.................... 
.................... 
.................... int8 const LCD_INIT_STRING[4] =
.................... {
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots
....................  0xc,                    // Display on
....................  1,                      // Clear display
....................  6                       // Increment cursor
....................  };
.................... 
.................... 
.................... //-------------------------------------
.................... void lcd_send_nibble(int8 nibble)
.................... {
.................... // Note:  !! converts an integer expression
.................... // to a boolean (1 or 0).
....................  output_bit(LCD_DB4, !!(nibble & 1));
0035:  BTFSC  2D.0
0036:  GOTO   039
0037:  BCF    06.3
0038:  GOTO   03A
0039:  BSF    06.3
003A:  BSF    03.5
003B:  BCF    06.3
....................  output_bit(LCD_DB5, !!(nibble & 2));
003C:  BCF    03.5
003D:  BTFSC  2D.1
003E:  GOTO   041
003F:  BCF    06.4
0040:  GOTO   042
0041:  BSF    06.4
0042:  BSF    03.5
0043:  BCF    06.4
....................  output_bit(LCD_DB6, !!(nibble & 4));
0044:  BCF    03.5
0045:  BTFSC  2D.2
0046:  GOTO   049
0047:  BCF    06.5
0048:  GOTO   04A
0049:  BSF    06.5
004A:  BSF    03.5
004B:  BCF    06.5
....................  output_bit(LCD_DB7, !!(nibble & 8));
004C:  BCF    03.5
004D:  BTFSC  2D.3
004E:  GOTO   051
004F:  BCF    06.6
0050:  GOTO   052
0051:  BSF    06.6
0052:  BSF    03.5
0053:  BCF    06.6
.................... 
....................  delay_cycles(1);
0054:  NOP
....................  output_high(LCD_E);
0055:  BCF    06.2
0056:  BCF    03.5
0057:  BSF    06.2
....................  delay_us(2);
0058:  MOVLW  03
0059:  MOVWF  77
005A:  DECFSZ 77,F
005B:  GOTO   05A
....................  output_low(LCD_E);
005C:  BSF    03.5
005D:  BCF    06.2
005E:  BCF    03.5
005F:  BCF    06.2
0060:  RETURN
.................... }
.................... 
.................... //-----------------------------------
.................... // This sub-routine is only called by lcd_read_byte().
.................... // It's not a stand-alone routine.  For example, the
.................... // R/W signal is set high by lcd_read_byte() before
.................... // this routine is called.
.................... 
.................... #ifdef USE_LCD_RW
.................... int8 lcd_read_nibble(void)
.................... {
.................... int8 retval;
.................... // Create bit variables so that we can easily set
.................... // individual bits in the retval variable.
.................... #bit retval_0 = retval.0
.................... #bit retval_1 = retval.1
.................... #bit retval_2 = retval.2
.................... #bit retval_3 = retval.3
.................... 
.................... retval = 0;
0061:  CLRF   2E
.................... 
.................... output_high(LCD_E);
0062:  BSF    03.5
0063:  BCF    06.2
0064:  BCF    03.5
0065:  BSF    06.2
.................... delay_cycles(1);
0066:  NOP
.................... 
.................... retval_0 = input(LCD_DB4);
0067:  BSF    03.5
0068:  BSF    06.3
0069:  BCF    03.5
006A:  BCF    2E.0
006B:  BTFSC  06.3
006C:  BSF    2E.0
.................... retval_1 = input(LCD_DB5);
006D:  BSF    03.5
006E:  BSF    06.4
006F:  BCF    03.5
0070:  BCF    2E.1
0071:  BTFSC  06.4
0072:  BSF    2E.1
.................... retval_2 = input(LCD_DB6);
0073:  BSF    03.5
0074:  BSF    06.5
0075:  BCF    03.5
0076:  BCF    2E.2
0077:  BTFSC  06.5
0078:  BSF    2E.2
.................... retval_3 = input(LCD_DB7);
0079:  BSF    03.5
007A:  BSF    06.6
007B:  BCF    03.5
007C:  BCF    2E.3
007D:  BTFSC  06.6
007E:  BSF    2E.3
.................... 
.................... output_low(LCD_E);
007F:  BSF    03.5
0080:  BCF    06.2
0081:  BCF    03.5
0082:  BCF    06.2
.................... 
.................... return(retval);
0083:  MOVF   2E,W
0084:  MOVWF  78
0085:  RETURN
.................... }
.................... #endif
.................... 
.................... //---------------------------------------
.................... // Read a byte from the LCD and return it.
.................... 
.................... #ifdef USE_LCD_RW
.................... int8 lcd_read_byte(void)
.................... {
.................... int8 low;
.................... int8 high;
.................... 
.................... output_high(LCD_RW);
*
008A:  BSF    03.5
008B:  BCF    06.1
008C:  BCF    03.5
008D:  BSF    06.1
.................... delay_cycles(1);
008E:  NOP
.................... 
.................... high = lcd_read_nibble();
008F:  CALL   061
0090:  MOVF   78,W
0091:  MOVWF  2D
.................... 
.................... low = lcd_read_nibble();
0092:  CALL   061
0093:  MOVF   78,W
0094:  MOVWF  2C
.................... 
.................... return( (high<<4) | low);
0095:  SWAPF  2D,W
0096:  MOVWF  77
0097:  MOVLW  F0
0098:  ANDWF  77,F
0099:  MOVF   77,W
009A:  IORWF  2C,W
009B:  MOVWF  78
.................... }
.................... #endif
.................... 
.................... //----------------------------------------
.................... // Send a byte to the LCD.
.................... void lcd_send_byte(int8 address, int8 n)
.................... {
.................... output_low(LCD_RS);
*
0086:  BSF    03.5
0087:  BCF    06.0
0088:  BCF    03.5
0089:  BCF    06.0
.................... 
.................... #ifdef USE_LCD_RW
.................... while(bit_test(lcd_read_byte(),7)) ;
*
009C:  MOVF   78,W
009D:  MOVWF  2C
009E:  BTFSC  2C.7
009F:  GOTO   08A
.................... #else
.................... delay_us(60);
.................... #endif
.................... 
.................... if(address)
00A0:  MOVF   2A,F
00A1:  BTFSC  03.2
00A2:  GOTO   0A8
....................    output_high(LCD_RS);
00A3:  BSF    03.5
00A4:  BCF    06.0
00A5:  BCF    03.5
00A6:  BSF    06.0
00A7:  GOTO   0AC
.................... else
....................    output_low(LCD_RS);
00A8:  BSF    03.5
00A9:  BCF    06.0
00AA:  BCF    03.5
00AB:  BCF    06.0
.................... 
....................  delay_cycles(1);
00AC:  NOP
.................... 
.................... #ifdef USE_LCD_RW
.................... output_low(LCD_RW);
00AD:  BSF    03.5
00AE:  BCF    06.1
00AF:  BCF    03.5
00B0:  BCF    06.1
.................... delay_cycles(1);
00B1:  NOP
.................... #endif
.................... 
.................... output_low(LCD_E);
00B2:  BSF    03.5
00B3:  BCF    06.2
00B4:  BCF    03.5
00B5:  BCF    06.2
.................... 
.................... lcd_send_nibble(n >> 4);
00B6:  SWAPF  2B,W
00B7:  MOVWF  2C
00B8:  MOVLW  0F
00B9:  ANDWF  2C,F
00BA:  MOVF   2C,W
00BB:  MOVWF  2D
00BC:  CALL   035
.................... lcd_send_nibble(n & 0xf);
00BD:  MOVF   2B,W
00BE:  ANDLW  0F
00BF:  MOVWF  2C
00C0:  MOVWF  2D
00C1:  CALL   035
00C2:  RETURN
.................... }
.................... 
.................... //----------------------------
.................... void lcd_init(void)
.................... {
.................... int8 i;
.................... 
.................... output_low(LCD_RS);
00C3:  BSF    03.5
00C4:  BCF    06.0
00C5:  BCF    03.5
00C6:  BCF    06.0
.................... 
.................... #ifdef USE_LCD_RW
.................... output_low(LCD_RW);
00C7:  BSF    03.5
00C8:  BCF    06.1
00C9:  BCF    03.5
00CA:  BCF    06.1
.................... #endif
.................... 
.................... output_low(LCD_E);
00CB:  BSF    03.5
00CC:  BCF    06.2
00CD:  BCF    03.5
00CE:  BCF    06.2
.................... 
.................... delay_ms(15);
00CF:  MOVLW  0F
00D0:  MOVWF  26
00D1:  CALL   021
.................... 
.................... for(i=0 ;i < 3; i++)
00D2:  CLRF   22
00D3:  MOVF   22,W
00D4:  SUBLW  02
00D5:  BTFSS  03.0
00D6:  GOTO   0DF
....................    {
....................     lcd_send_nibble(0x03);
00D7:  MOVLW  03
00D8:  MOVWF  2D
00D9:  CALL   035
....................     delay_ms(5);
00DA:  MOVLW  05
00DB:  MOVWF  26
00DC:  CALL   021
00DD:  INCF   22,F
00DE:  GOTO   0D3
....................    }
.................... 
.................... lcd_send_nibble(0x02);
00DF:  MOVLW  02
00E0:  MOVWF  2D
00E1:  CALL   035
.................... 
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++)
00E2:  CLRF   22
00E3:  MOVF   22,W
00E4:  SUBLW  03
00E5:  BTFSS  03.0
00E6:  GOTO   0F0
....................    {
....................     lcd_send_byte(0, LCD_INIT_STRING[i]);
00E7:  MOVF   22,W
00E8:  CALL   004
00E9:  MOVWF  23
00EA:  CLRF   2A
00EB:  MOVF   23,W
00EC:  MOVWF  2B
00ED:  CALL   086
.................... 
....................     // If the R/W signal is not used, then
....................     // the busy bit can't be polled.  One of
....................     // the init commands takes longer than
....................     // the hard-coded delay of 60 us, so in
....................     // that case, lets just do a 5 ms delay
....................     // after all four of them.
....................     #ifndef USE_LCD_RW
00EE:  INCF   22,F
00EF:  GOTO   0E3
....................     delay_ms(5);
....................     #endif
....................    }
00F0:  RETURN
.................... 
.................... }
.................... 
.................... //----------------------------
.................... 
.................... void lcd_gotoxy(int8 x, int8 y)
.................... {
.................... int8 address;
.................... 
.................... if(y != 1)
00F1:  DECFSZ 27,W
00F2:  GOTO   0F4
00F3:  GOTO   0F7
....................    address = lcd_line_two;
00F4:  MOVLW  40
00F5:  MOVWF  28
00F6:  GOTO   0F8
.................... else
....................    address=0;
00F7:  CLRF   28
.................... 
.................... address += x-1;
00F8:  MOVLW  01
00F9:  SUBWF  26,W
00FA:  ADDWF  28,F
.................... lcd_send_byte(0, 0x80 | address);
00FB:  MOVF   28,W
00FC:  IORLW  80
00FD:  MOVWF  29
00FE:  CLRF   2A
00FF:  MOVF   29,W
0100:  MOVWF  2B
0101:  CALL   086
0102:  RETURN
.................... }
.................... 
.................... //-----------------------------
.................... void lcd_putc(char c)
.................... {
....................  switch(c)
0103:  MOVF   25,W
0104:  XORLW  0C
0105:  BTFSC  03.2
0106:  GOTO   10E
0107:  XORLW  06
0108:  BTFSC  03.2
0109:  GOTO   116
010A:  XORLW  02
010B:  BTFSC  03.2
010C:  GOTO   11C
010D:  GOTO   121
....................    {
....................     case '\f':
....................       lcd_send_byte(0,1);
010E:  CLRF   2A
010F:  MOVLW  01
0110:  MOVWF  2B
0111:  CALL   086
....................       delay_ms(2);
0112:  MOVLW  02
0113:  MOVWF  26
0114:  CALL   021
....................       break;
0115:  GOTO   126
.................... 
....................     case '\n':
....................        lcd_gotoxy(1,2);
0116:  MOVLW  01
0117:  MOVWF  26
0118:  MOVLW  02
0119:  MOVWF  27
011A:  CALL   0F1
....................        break;
011B:  GOTO   126
.................... 
....................     case '\b':
....................        lcd_send_byte(0,0x10);
011C:  CLRF   2A
011D:  MOVLW  10
011E:  MOVWF  2B
011F:  CALL   086
....................        break;
0120:  GOTO   126
.................... 
....................     default:
....................        lcd_send_byte(1,c);
0121:  MOVLW  01
0122:  MOVWF  2A
0123:  MOVF   25,W
0124:  MOVWF  2B
0125:  CALL   086
....................        break;
....................    }
0126:  RETURN
.................... }
.................... 
.................... //------------------------------
.................... #ifdef USE_LCD_RW
.................... char lcd_getc(int8 x, int8 y)
.................... {
.................... char value;
.................... 
.................... lcd_gotoxy(x,y);
.................... 
.................... // Wait until busy flag is low.
.................... while(bit_test(lcd_read_byte(),7));
.................... 
.................... output_high(LCD_RS);
.................... value = lcd_read_byte();
.................... output_low(lcd_RS);
.................... 
.................... return(value);
.................... }
.................... #endif
.................... 
.................... void lcd_setcursor_vb(short visible, short blink) { 
....................   lcd_send_byte(0, 0xC|(visible<<1)|blink); 
.................... } 
.................... 
.................... 
.................... 
.................... void main ( void ) {
*
017D:  MOVF   03,W
017E:  ANDLW  1F
017F:  MOVWF  03
0180:  CLRF   21
0181:  CLRF   20
0182:  BSF    03.5
0183:  BSF    03.6
0184:  MOVF   09,W
0185:  ANDLW  C0
0186:  MOVWF  09
0187:  BCF    03.6
0188:  BCF    1F.4
0189:  BCF    1F.5
018A:  MOVLW  00
018B:  BSF    03.6
018C:  MOVWF  08
018D:  BCF    03.5
018E:  CLRF   07
018F:  CLRF   08
0190:  CLRF   09
0191:  BCF    03.7
....................    lcd_init ( );                            // Inicialización del lcd.
0192:  BCF    03.6
0193:  CALL   0C3
....................    delay_ms ( 50 );
0194:  MOVLW  32
0195:  MOVWF  26
0196:  CALL   021
.................... 
....................    while ( 1 ) {
....................       printf ( lcd_putc, "   MICROSIDE" );  // Entre comillas escribimos el mensaje a mostrar
0197:  MOVLW  0C
0198:  BSF    03.6
0199:  MOVWF  0D
019A:  MOVLW  00
019B:  MOVWF  0F
019C:  BCF    03.6
019D:  CALL   127
....................       delay_ms ( 2000 );
019E:  MOVLW  08
019F:  MOVWF  22
01A0:  MOVLW  FA
01A1:  MOVWF  26
01A2:  CALL   021
01A3:  DECFSZ 22,F
01A4:  GOTO   1A0
....................                
....................       lcd_gotoxy (1, 2);                    // Segundo renglón
01A5:  MOVLW  01
01A6:  MOVWF  26
01A7:  MOVLW  02
01A8:  MOVWF  27
01A9:  CALL   0F1
....................       printf ( lcd_putc, "   TECHNOLOGY" ); // Entre comillas escribimos el mensaje a mostrar
01AA:  MOVLW  13
01AB:  BSF    03.6
01AC:  MOVWF  0D
01AD:  MOVLW  00
01AE:  MOVWF  0F
01AF:  BCF    03.6
01B0:  CALL   127
....................       delay_ms ( 2000 );
01B1:  MOVLW  08
01B2:  MOVWF  22
01B3:  MOVLW  FA
01B4:  MOVWF  26
01B5:  CALL   021
01B6:  DECFSZ 22,F
01B7:  GOTO   1B3
.................... 
....................       lcd_gotoxy (1, 1);                    // regresa cursor al inicio
01B8:  MOVLW  01
01B9:  MOVWF  26
01BA:  MOVWF  27
01BB:  CALL   0F1
....................       lcd_init ( );                         // limpia display
01BC:  CALL   0C3
....................       delay_ms (1000);
01BD:  MOVLW  04
01BE:  MOVWF  22
01BF:  MOVLW  FA
01C0:  MOVWF  26
01C1:  CALL   021
01C2:  DECFSZ 22,F
01C3:  GOTO   1BF
.................... 
....................       printf ( lcd_putc, "  BIENVENIDOS" ); // Entre comillas escribimos el mensaje a mostrar
01C4:  MOVLW  1A
01C5:  BSF    03.6
01C6:  MOVWF  0D
01C7:  MOVLW  00
01C8:  MOVWF  0F
01C9:  BCF    03.6
01CA:  CALL   127
....................       delay_ms ( 2000 );
01CB:  MOVLW  08
01CC:  MOVWF  22
01CD:  MOVLW  FA
01CE:  MOVWF  26
01CF:  CALL   021
01D0:  DECFSZ 22,F
01D1:  GOTO   1CD
.................... 
....................       lcd_init ( );                         // limpia display
01D2:  CALL   0C3
....................       delay_ms ( 2000 );
01D3:  MOVLW  08
01D4:  MOVWF  22
01D5:  MOVLW  FA
01D6:  MOVWF  26
01D7:  CALL   021
01D8:  DECFSZ 22,F
01D9:  GOTO   1D5
01DA:  GOTO   197
....................    }
.................... }
01DB:  SLEEP

Configuration Fuses:
   Word  1: 2FE2   HS NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
